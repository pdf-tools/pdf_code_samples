{
	"info": {
		"name": "Conversion Service Advanced API",
		"description": "Contact support: [https://www.pdf-tools.com/docs/support/](https://www.pdf-tools.com/docs/support/)  \nDocumentation: [https://www.pdf-tools.com/docs/conversion-service/](https://www.pdf-tools.com/docs/conversion-service/)  \nCompany name: PDF Tools AG  \nEmail: [pdfsupport@pdf-tools.com](https://mailto:pdfsupport@pdf-tools.com)\n\nLeverage fine-grained control over the conversion process, letting you convert many documents in bulk and check their status during the conversion process. Reliably process the harmonization of documents from various sources and prepare them optimally for your intended purpose.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Job Processing",
			"item": [
				{
					"name": "Create new job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Job created\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 201) {\r",
									"    pm.collectionVariables.set(\"jobId\", pm.response.json().jobId);\r",
									"\r",
									"    postman.setNextRequest(\"Add data to job\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/jobs/?workflow=Archive PDF/A-2&profile=default",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs",
								""
							],
							"query": [
								{
									"key": "workflow",
									"value": "Archive PDF/A-2",
									"description": "The name of the workflow.\n\nIf no workflow is specified, the default workflow of the service is used.\n"
								},
								{
									"key": "profile",
									"value": "default",
									"description": "The name of the profile.\n\nIf no profile is specified, the default profile of the workflow is used.\n"
								},
								{
									"key": "name",
									"value": "<string>",
									"description": "The name of the job.\n\nThis value may be used by the workflow,\ne.g. to name the output file when merging multiple inputs.\n",
									"disabled": true
								}
							]
						},
						"description": "Create a new job to be processed with the given `workflow` and `profile`.\nAfter the job has been created, data (typically documents) can be added using the `addData` request.\n\nAll created jobs should be deleted using the `deleteJob` request.\n"
					},
					"response": [
						{
							"name": "Successful response to the createJob and getJobInfo requests",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/?workflow=Archive PDF/A-2&profile=default",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										""
									],
									"query": [
										{
											"key": "workflow",
											"value": "Archive PDF/A-2"
										},
										{
											"key": "profile",
											"value": "default"
										},
										{
											"key": "name",
											"value": "<string>",
											"disabled": true
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"jobId\": \"{{jobId}}\",\n \"status\": {\n  \"code\": \"<string>\",\n  \"message\": \"<string>\"\n }\n}"
						},
						{
							"name": "- Request could not be parsed\n- The options are not valid JSON\n- The requested workflow or profile does not exist\n",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/?workflow=Archive PDF/A-2&profile=default",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										""
									],
									"query": [
										{
											"key": "workflow",
											"value": "Archive PDF/A-2"
										},
										{
											"key": "profile",
											"value": "default"
										},
										{
											"key": "name",
											"value": "<string>",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\n \"title\": \"<string>\",\n \"detail\": \"<string>\",\n \"status\": \"<string>\",\n \"type\": \"<string>\"\n}"
						},
						{
							"name": "The content type is neither application/json nor application/xml",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/?workflow=Archive PDF/A-2&profile=default",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										""
									],
									"query": [
										{
											"key": "workflow",
											"value": "Archive PDF/A-2"
										},
										{
											"key": "profile",
											"value": "default"
										},
										{
											"key": "name",
											"value": "<string>",
											"disabled": true
										}
									]
								}
							},
							"status": "Unsupported Media Type",
							"code": 415,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Too many jobs.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/?workflow=Archive PDF/A-2&profile=default",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										""
									],
									"query": [
										{
											"key": "workflow",
											"value": "Archive PDF/A-2"
										},
										{
											"key": "profile",
											"value": "default"
										},
										{
											"key": "name",
											"value": "<string>",
											"disabled": true
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\n \"title\": \"<string>\",\n \"detail\": \"<string>\",\n \"status\": \"<string>\",\n \"type\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Add data to job",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Job created previously\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"jobId\"), \"Job must be created previously\").to.not.equal(\"nojob\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Data added\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 201) {\r",
									"    postman.setNextRequest(\"Start job\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"description": "(Required) The file/data to be appended to the job.\n\nThe `Content-Disposition` header must contain either the\n`filename` or the `filename*` parameter.\nIt is recommended to set a filename with an extension.\nAlternatively the MIME type of the data is used to determine its type.\n\nThe query parameter \"url\" is ignored if multipart/form-data content is used.\n",
									"type": "file",
									"src": []
								},
								{
									"key": "options",
									"value": "[{\"name\":\"<string>\",\"value\":\"<string>\"},{\"name\":\"<string>\",\"value\":\"<string>\"}]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/jobs/:jobId/data/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs",
								":jobId",
								"data",
								""
							],
							"variable": [
								{
									"key": "jobId",
									"value": "{{jobId}}",
									"description": "(Required) The job ID as returned by `createJob`."
								}
							]
						},
						"description": "Add data (typically a document) to the job.\nThe data is processed immediately by the workflow.\n\nUse the `startJob` request to signal that all data has been added to the job.\n"
					},
					"response": [
						{
							"name": "Successful response to the addData request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "(Required) The file/data to be appended to the job.\n\nThe `Content-Disposition` header must contain either the\n`filename` or the `filename*` parameter.\nIt is recommended to set a filename with an extension.\nAlternatively the MIME type of the data is used to determine its type.\n",
											"type": "file",
											"src": []
										},
										{
											"key": "options",
											"value": "[{\"name\":\"<string>\",\"value\":\"<string>\"},{\"name\":\"<string>\",\"value\":\"<string>\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/data/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"data",
										""
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"dataId\": \"<string>\"\n}"
						},
						{
							"name": "- Request could not be parsed\n- The data is missing\n- The data's filename is missing\n- The options are not valid JSON/XML\n",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "(Required) The file/data to be appended to the job.\n\nThe `Content-Disposition` header must contain either the\n`filename` or the `filename*` parameter.\nIt is recommended to set a filename with an extension.\nAlternatively the MIME type of the data is used to determine its type.\n",
											"type": "file",
											"src": []
										},
										{
											"key": "options",
											"value": "[{\"name\":\"<string>\",\"value\":\"<string>\"},{\"name\":\"<string>\",\"value\":\"<string>\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/data/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"data",
										""
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\n \"title\": \"<string>\",\n \"detail\": \"<string>\",\n \"status\": \"<string>\",\n \"type\": \"<string>\"\n}"
						},
						{
							"name": "The job with the specified ID could not be found.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "(Required) The file/data to be appended to the job.\n\nThe `Content-Disposition` header must contain either the\n`filename` or the `filename*` parameter.\nIt is recommended to set a filename with an extension.\nAlternatively the MIME type of the data is used to determine its type.\n",
											"type": "file",
											"src": []
										},
										{
											"key": "options",
											"value": "[{\"name\":\"<string>\",\"value\":\"<string>\"},{\"name\":\"<string>\",\"value\":\"<string>\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/data/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"data",
										""
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"type\": \"http://www.pdf-tools.com/service/rest/errors/jobNotFound\",\r\n    \"title\": \"Job not found.\",\r\n    \"detail\": \"The job with ID '{{jobId}}' could not be found\",\r\n    \"status\": 404\r\n}"
						},
						{
							"name": "The job has already been started or canceled.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "(Required) The file/data to be appended to the job.\n\nThe `Content-Disposition` header must contain either the\n`filename` or the `filename*` parameter.\nIt is recommended to set a filename with an extension.\nAlternatively the MIME type of the data is used to determine its type.\n",
											"type": "file",
											"src": []
										},
										{
											"key": "options",
											"value": "[{\"name\":\"<string>\",\"value\":\"<string>\"},{\"name\":\"<string>\",\"value\":\"<string>\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/data/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"data",
										""
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\n \"title\": \"<string>\",\n \"detail\": \"<string>\",\n \"status\": \"<string>\",\n \"type\": \"<string>\"\n}"
						},
						{
							"name": "- The content type is not multipart/form-data- The content type of the options field in the multipart/form-data content is not application/json",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "(Required) The file/data to be appended to the job.\n\nThe `Content-Disposition` header must contain either the\n`filename` or the `filename*` parameter.\nIt is recommended to set a filename with an extension.\nAlternatively the MIME type of the data is used to determine its type.\n",
											"type": "file",
											"src": []
										},
										{
											"key": "options",
											"value": "[{\"name\":\"<string>\",\"value\":\"<string>\"},{\"name\":\"<string>\",\"value\":\"<string>\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/data/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"data",
										""
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Unsupported Media Type",
							"code": 415,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Problem with option data",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "(Required) The file/data to be appended to the job.\n\nThe `Content-Disposition` header must contain either the\n`filename` or the `filename*` parameter.\nIt is recommended to set a filename with an extension.\nAlternatively the MIME type of the data is used to determine its type.\n",
											"type": "file",
											"src": []
										},
										{
											"key": "options",
											"value": "[{\"name\":\"<string>\",\"value\":\"<string>\"},{\"name\":\"<string>\",\"value\":\"<string>\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/data/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"data",
										""
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"code": 427,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add data by URL to job",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Job created previously\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"jobId\"), \"Job must be created previously\").to.not.equal(\"nojob\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Data added\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 201) {\r",
									"    postman.setNextRequest(\"Start job\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    },\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/jobs/:jobId/data/?url=<url>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs",
								":jobId",
								"data",
								""
							],
							"query": [
								{
									"key": "url",
									"value": "<url>",
									"description": "The HTTP(S) URL where the file can be downloaded.\n\nIf this parameter is used, the Content-Type\nmust be application/json or application/xml and contain only the options.\n"
								}
							],
							"variable": [
								{
									"key": "jobId",
									"value": "{{jobId}}",
									"description": "(Required) The job ID as returned by `createJob`."
								}
							]
						},
						"description": "Add data (typically a document) by URL to the job.\nThe data is processed immediately by the workflow.\n\nUse the `startJob` request to signal that all data has been added to the job.\n"
					},
					"response": [
						{
							"name": "Successful response to the addData request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    },\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/data/?url=<url>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"data",
										""
									],
									"query": [
										{
											"key": "url",
											"value": "<url>"
										}
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"dataId\": \"<string>\"\n}"
						},
						{
							"name": "- Request could not be parsed\n- The options are not valid JSON/XML\n",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    },\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/data/?url=<url>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"data",
										""
									],
									"query": [
										{
											"key": "url",
											"value": "<url>"
										}
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\n \"title\": \"<string>\",\n \"detail\": \"<string>\",\n \"status\": \"<string>\",\n \"type\": \"<string>\"\n}"
						},
						{
							"name": "The file could not be downloaded from the provided URL.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    },\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/data/?url=<url>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"data",
										""
									],
									"query": [
										{
											"key": "url",
											"value": "<url>",
											"description": "The HTTP(S) URL where the file can be downloaded.\n\nIf this parameter is used, the Content-Type\nmust be application/json or application/xml and contain only the options.\n"
										}
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"title\": \"<string>\",\n    \"detail\": \"<string>\",\n    \"status\": \"<string>\",\n    \"type\": \"<string>\"\n}"
						},
						{
							"name": "The job with the specified ID could not be found.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    },\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/data/?url=<url>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"data",
										""
									],
									"query": [
										{
											"key": "url",
											"value": "<url>"
										}
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"type\": \"http://www.pdf-tools.com/service/rest/errors/jobNotFound\",\r\n    \"title\": \"Job not found.\",\r\n    \"detail\": \"The job with ID '{{jobId}}' could not be found\",\r\n    \"status\": 404\r\n}"
						},
						{
							"name": "The job has already been started or canceled.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    },\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/data/?url=<url>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"data",
										""
									],
									"query": [
										{
											"key": "url",
											"value": "<url>"
										}
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\n \"title\": \"<string>\",\n \"detail\": \"<string>\",\n \"status\": \"<string>\",\n \"type\": \"<string>\"\n}"
						},
						{
							"name": "- The content type is not multipart/form-data, application/json or application/xml\n- The content type of the options field in the multipart/form-data content is not application/json\n",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    },\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/data/?url=<url>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"data",
										""
									],
									"query": [
										{
											"key": "url",
											"value": "<url>"
										}
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Unsupported Media Type",
							"code": 415,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Problem with option data",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    },\r\n    {\r\n        \"name\": \"<string>\",\r\n        \"value\": \"<string>\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/data/?url=<url>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"data",
										""
									],
									"query": [
										{
											"key": "url",
											"value": "<url>"
										}
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"code": 427,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Start job",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Job created\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"jobId\"), \"Job must be created previously\").to.not.equal(\"nojob\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Job started previously\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 204) {\r",
									"    postman.setNextRequest(\"Get job result\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/jobs/{{jobId}}:start",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs",
								"{{jobId}}:start"
							]
						},
						"description": "Signal that all data has been added to a job.\nDocuments are processed immediately after they have been added.\nThe `startJob` request activates the subsequent document merge and post processing steps.\n\nAfter starting a job, its result can be awaited using the `getJobResult` request.\n"
					},
					"response": [
						{
							"name": "The job has been started successfully",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/{{jobId}}:start",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										"{{jobId}}:start"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The job with the specified ID could not be found.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/{{jobId}}:start",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										"{{jobId}}:start"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"type\": \"http://www.pdf-tools.com/service/rest/errors/jobNotFound\",\r\n    \"title\": \"Job not found.\",\r\n    \"detail\": \"The job with ID '{{jobId}}' could not be found\",\r\n    \"status\": 404\r\n}"
						},
						{
							"name": "The job has already been started or canceled.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/{{jobId}}:start",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										"{{jobId}}:start"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\n \"title\": \"<string>\",\n \"detail\": \"<string>\",\n \"status\": \"<string>\",\n \"type\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Cancel job",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Job created previously\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"jobId\"), \"Job must be created previously\").to.not.equal(\"nojob\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Job cancelled\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([202]);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 202) {\r",
									"    postman.setNextRequest(\"Delete job\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/jobs/{{jobId}}:cancel",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs",
								"{{jobId}}:cancel"
							]
						},
						"description": "Cancel the processing of a job.\nThis request has no effect if a job has not been started or has already finished.\n\nIf the job has already finished, its result is not affected by `cancelJob`.\nThe job's result can still be requested using `getJobResult`.\nIf the job's result is not required anymore, `cancelJob` is optional.\nInstead, the job can simply be deleted using `deleteJob`.\n"
					},
					"response": [
						{
							"name": "Cancellation has been requested successfully.\nThis status is returned even if it is too late to actually cancel the job,\nfor example when the job has already been canceled or finished.\nThe job result returned by `getJobResult` can be used to determine if the job\ncould actually be canceled successfully.\n",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/{{jobId}}:cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										"{{jobId}}:cancel"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The job with the specified ID could not be found.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/{{jobId}}:cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										"{{jobId}}:cancel"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"type\": \"http://www.pdf-tools.com/service/rest/errors/jobNotFound\",\r\n    \"title\": \"Job not found.\",\r\n    \"detail\": \"The job with ID '{{jobId}}' could not be found\",\r\n    \"status\": 404\r\n}"
						}
					]
				},
				{
					"name": "Get job info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Job created previously\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"jobId\"), \"Job must be created previously\").to.not.equal(\"nojob\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/jobs/:jobId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs",
								":jobId"
							],
							"variable": [
								{
									"key": "jobId",
									"value": "{{jobId}}",
									"description": "(Required) The job ID as returned by `createJob`."
								}
							]
						}
					},
					"response": [
						{
							"name": "Successful response to the createJob and getJobInfo requests",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"jobId\": \"{{jobId}}\",\n \"status\": {\n  \"code\": \"<string>\",\n  \"message\": \"<string>\"\n }\n}"
						},
						{
							"name": "The job with the specified ID could not be found.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"type\": \"http://www.pdf-tools.com/service/rest/errors/jobNotFound\",\r\n    \"title\": \"Job not found.\",\r\n    \"detail\": \"The job with ID '{{jobId}}' could not be found\",\r\n    \"status\": 404\r\n}"
						}
					]
				},
				{
					"name": "Get job result",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Job created previously\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"jobId\"), \"Job must be created previously\").to.not.equal(\"nojob\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get job result\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 200 &&\r",
									"    pm.response.json().success == true) {\r",
									"    pm.collectionVariables.set(\"resultId\", pm.response.json().dataList[0].resultId);\r",
									"\r",
									"    postman.setNextRequest(\"Get job result data\");\r",
									"} else {\r",
									"    postman.setNextRequest(\"Delete job\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/jobs/:jobId/result",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs",
								":jobId",
								"result"
							],
							"variable": [
								{
									"key": "jobId",
									"value": "{{jobId}}",
									"description": "(Required) The job ID as returned by `createJob`."
								}
							]
						},
						"description": "This call blocks until the result is available. If blocking is not acceptable, `getJobInfo` can be polled, until\nthe job's status is `completed`.\n\nIf the job has completed successfully, its result data, typically documents, can be retrieved using the `getJobResultData` request.\n\nNote that when waiting for the job result, request timeouts may occur after 2 minutes.\nTherefore, it is recommended to handle request timeouts, especially for long-running jobs or for services under high load.\n"
					},
					"response": [
						{
							"name": "Successful response to the getJobResult request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/result",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"result"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"success\": true,\n \"error\": {\n  \"code\": \"<string>\",\n  \"message\": \"<string>\"\n },\n \"events\": [\n  {\n   \"code\": \"<string>\",\n   \"severity\": \"<string>\",\n   \"message\": \"<string>\",\n   \"dataId\": \"<string>\",\n   \"dataPart\": \"<string>\"\n  },\n  {\n   \"code\": \"<string>\",\n   \"severity\": \"<string>\",\n   \"message\": \"<string>\",\n   \"dataId\": \"<string>\",\n   \"dataPart\": \"<string>\"\n  }\n ],\n \"dataList\": [\n  {\n   \"fileName\": \"<string>\",\n   \"resultId\": \"<string>\",\n   \"properties\": [\n    {\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    },\n    {\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"fileName\": \"<string>\",\n   \"resultId\": \"<string>\",\n   \"properties\": [\n    {\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    },\n    {\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
						},
						{
							"name": "The job with the specified ID could not be found.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/result",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"result"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"type\": \"http://www.pdf-tools.com/service/rest/errors/jobNotFound\",\r\n    \"title\": \"Job not found.\",\r\n    \"detail\": \"The job with ID '{{jobId}}' could not be found\",\r\n    \"status\": 404\r\n}"
						},
						{
							"name": "The job has no result, e.g. because it has not yet been started.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/result",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"result"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get job result data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Job created previously\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"jobId\"), \"Job must be created previously\").to.not.equal(\"nojob\")\r",
									"});\r",
									"pm.test(\"Got result previously\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"resultId\"), \"Job result must be retrieved previously\").to.not.equal(\"noresult\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get job result data\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    postman.setNextRequest(\"Delete job\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/jobs/:jobId/result/:resultId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs",
								":jobId",
								"result",
								":resultId"
							],
							"variable": [
								{
									"key": "jobId",
									"value": "{{jobId}}",
									"description": "(Required) The job ID as returned by `createJob`."
								},
								{
									"key": "resultId",
									"value": "{{resultId}}",
									"description": "(Required) The result data's ID as returned by `getJobResult`."
								}
							]
						},
						"description": "Get result data, typically a document, of a job that has completed successfully.\n"
					},
					"response": [
						{
							"name": "Successful response to the getJobResultData request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/result/:resultId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"result",
										":resultId"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										},
										{
											"key": "resultId",
											"value": "{{resultId}}",
											"description": "(Required) The result data's ID as returned by `getJobResult`."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "<binary>"
						},
						{
							"name": "The job or result with the specified ID could not be found.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/result/:resultId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"result",
										":resultId"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										},
										{
											"key": "resultId",
											"value": "{{resultId}}",
											"description": "(Required) The result data's ID as returned by `getJobResult`."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"type\": \"http://www.pdf-tools.com/service/rest/errors/jobNotFound\",\r\n    \"title\": \"Job not found.\",\r\n    \"detail\": \"The job with ID '{{jobId}}' could not be found\",\r\n    \"status\": 404\r\n}"
						},
						{
							"name": "Unable to get result data, e.g. because it is not yet available. Call `getJobResult` first.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/result/:resultId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"result",
										":resultId"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										},
										{
											"key": "resultId",
											"value": "{{resultId}}",
											"description": "(Required) The result data's ID as returned by `getJobResult`."
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Store job result data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Job created previously\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"jobId\"), \"Job must be created previously\").to.not.equal(\"nojob\")\r",
									"});\r",
									"pm.test(\"Got result previously\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"resultId\"), \"Job result must be retrieved previously\").to.not.equal(\"noresult\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get job result data\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 204) {\r",
									"    postman.setNextRequest(\"Delete job\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/jobs/:jobId/result/{{resultId}}:{{storeMethod}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs",
								":jobId",
								"result",
								"{{resultId}}:{{storeMethod}}"
							],
							"variable": [
								{
									"key": "jobId",
									"value": "{{jobId}}",
									"description": "(Required) The job ID as returned by `createJob`."
								}
							]
						},
						"description": "Store the result data by sending it to a Webserver via HTTP(S) request.\n"
					},
					"response": [
						{
							"name": "The result has been stored successfully.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/result/{{resultId}}:{{storeMethod}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"result",
										"{{resultId}}:{{storeMethod}}"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "- The provided HTTP method is not valid.\n- The query parameter \"url\" is missing.\n- The provided URL is invalid (not a \"http(s):\" URL).\n- The file could sent to the provided URL.\n",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/result/{{resultId}}:{{storeMethod}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"result",
										"{{resultId}}:{{storeMethod}}"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\n \"title\": \"<string>\",\n \"detail\": \"<string>\",\n \"status\": \"<string>\",\n \"type\": \"<string>\"\n}"
						},
						{
							"name": "The job or result with the specified ID could not be found.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/result/{{resultId}}:{{storeMethod}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"result",
										"{{resultId}}:{{storeMethod}}"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"type\": \"http://www.pdf-tools.com/service/rest/errors/jobNotFound\",\r\n    \"title\": \"Job not found.\",\r\n    \"detail\": \"The job with ID '{{jobId}}' could not be found\",\r\n    \"status\": 404\r\n}"
						},
						{
							"name": "Unable to get result data, e.g. because it is not yet available. Call `getJobResult` first.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId/result/{{resultId}}:{{storeMethod}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId",
										"result",
										"{{resultId}}:{{storeMethod}}"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete job",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Job created previously\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"jobId\"), \"Job must be created previously\").to.not.equal(\"nojob\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Job deleted\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([202, 204]);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"jobId\", \"nojob\");\r",
									"pm.collectionVariables.set(\"resultId\", \"noresult\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/jobs/:jobId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs",
								":jobId"
							],
							"variable": [
								{
									"key": "jobId",
									"value": "{{jobId}}",
									"description": "(Required) The job ID as returned by `createJob`."
								}
							]
						},
						"description": "Delete the job and all associated resources.\nIt is recommended to delete all jobs that have been created.\nJobs that are not deleted explicitly are deleted automatically after a timeout or when the service is shut down.\n\nA job can be deleted regardless of its status.\nIf the status is `processing`, it is canceled automatically before deletion.\n"
					},
					"response": [
						{
							"name": "The job will be deleted as soon as processing has finished.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The job has been deleted successfully",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The job with the specified ID could not be found.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/:jobId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										":jobId"
									],
									"variable": [
										{
											"key": "jobId",
											"value": "{{jobId}}",
											"description": "(Required) The job ID as returned by `createJob`."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"type\": \"http://www.pdf-tools.com/service/rest/errors/jobNotFound\",\r\n    \"title\": \"Job not found.\",\r\n    \"detail\": \"The job with ID '{{jobId}}' could not be found\",\r\n    \"status\": 404\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "Service Information",
			"item": [
				{
					"name": "Get the service status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						}
					},
					"response": [
						{
							"name": "Successful response to the getSeviceStatus request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"<string>\",\n \"status\": \"<string>\",\n \"isolation\": {\n  \"processCount\": \"<integer>\",\n  \"queueLength\": \"<integer>\"\n },\n \"jobCounts\": {\n  \"creating\": \"<integer>\",\n  \"processing\": \"<integer>\",\n  \"completed\": \"<integer>\",\n  \"total\": \"<integer>\"\n },\n \"startTime\": \"<dateTime>\"\n}"
						}
					]
				},
				{
					"name": "List available workflows",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/workflows",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"workflows"
							]
						}
					},
					"response": [
						{
							"name": "A list of all available workflows.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/workflows",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"name\": \"<string>\",\n  \"isDefault\": true,\n  \"profiles\": [\n   {\n    \"name\": \"<string>\",\n    \"isDefault\": true\n   },\n   {\n    \"name\": \"<string>\",\n    \"isDefault\": false\n   }\n  ]\n },\n {\n  \"name\": \"<string>\",\n  \"isDefault\": false,\n  \"profiles\": [\n   {\n    \"name\": \"<string>\",\n    \"isDefault\": true\n   },\n   {\n    \"name\": \"<string>\",\n    \"isDefault\": true\n   }\n  ]\n }\n]"
						}
					]
				},
				{
					"name": "List all jobs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/jobs/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"jobs",
								""
							]
						},
						"description": "List all jobs and their statuses."
					},
					"response": [
						{
							"name": "Successful response to the listJobs request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/jobs/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"jobs",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"jobId\": \"<string>\",\n  \"status\": {\n   \"code\": \"<string>\",\n   \"message\": \"<string>\"\n  }\n },\n {\n  \"jobId\": \"<string>\",\n  \"status\": {\n   \"code\": \"<string>\",\n   \"message\": \"<string>\"\n  }\n }\n]"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:13033/conversion/v1.0/rest",
			"type": "string"
		},
		{
			"key": "jobId",
			"value": "nojob",
			"type": "any"
		},
		{
			"key": "resultId",
			"value": "noresult",
			"type": "any"
		},
		{
			"key": "storeMethod",
			"value": "put",
			"type": "any"
		}
	]
}